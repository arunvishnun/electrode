"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
const range = (n, cb) => {
  const r = [];
  for (let i = 0; i < n; i++) {
    r.push(cb(i));
  }
  return r;
};
function Large(props) {
  const {
    breadth,
    depth
  } = props;
  const rlvl = 150 + Math.floor(50 / (depth + 1));
  const level = 50 + Math.floor(100 / (depth + 1));
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: "1px",
      border: `solid 8px rgb(${rlvl}, ${level}, ${level})`
    }
  }, /*#__PURE__*/_react.default.createElement("span", {
    style: {
      fontSize: "8pt"
    }
  }, `hello ${depth}:${breadth}; `), range(breadth, i => /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: "inline",
      border: "solid 1px"
    },
    key: `b_${depth}_${i}`
  }, /*#__PURE__*/_react.default.createElement("span", {
    style: {
      fontSize: "8pt"
    }
  }, `${depth}-${i}; `), i < 3 && depth > 0 && /*#__PURE__*/_react.default.createElement(Large, {
    breadth: breadth,
    depth: depth - 1,
    imagesData: props.imagesData
  }))), range(8, i => /*#__PURE__*/_react.default.createElement("span", {
    key: i,
    style: {
      fontSize: "8pt"
    }
  }, `${i}.`)));
}
Large.propTypes = {
  breadth: _propTypes.default.number.isRequired,
  depth: _propTypes.default.number.isRequired,
  imagesData: _propTypes.default.array.isRequired
};
var _default = Large;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyYW5nZSIsIm4iLCJjYiIsInIiLCJpIiwicHVzaCIsIkxhcmdlIiwicHJvcHMiLCJicmVhZHRoIiwiZGVwdGgiLCJybHZsIiwiTWF0aCIsImZsb29yIiwibGV2ZWwiLCJwYWRkaW5nIiwiYm9yZGVyIiwiZm9udFNpemUiLCJkaXNwbGF5IiwiaW1hZ2VzRGF0YSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJhcnJheSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL2xhcmdlLmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmNvbnN0IHJhbmdlID0gKG4sIGNiKSA9PiB7XG4gIGNvbnN0IHIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICByLnB1c2goY2IoaSkpO1xuICB9XG4gIHJldHVybiByO1xufTtcblxuZnVuY3Rpb24gTGFyZ2UocHJvcHMpIHtcbiAgY29uc3QgeyBicmVhZHRoLCBkZXB0aCB9ID0gcHJvcHM7XG5cbiAgY29uc3Qgcmx2bCA9IDE1MCArIE1hdGguZmxvb3IoNTAgLyAoZGVwdGggKyAxKSk7XG4gIGNvbnN0IGxldmVsID0gNTAgKyBNYXRoLmZsb29yKDEwMCAvIChkZXB0aCArIDEpKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3sgcGFkZGluZzogXCIxcHhcIiwgYm9yZGVyOiBgc29saWQgOHB4IHJnYigke3Jsdmx9LCAke2xldmVsfSwgJHtsZXZlbH0pYCB9fT5cbiAgICAgIDxzcGFuIHN0eWxlPXt7IGZvbnRTaXplOiBcIjhwdFwiIH19PntgaGVsbG8gJHtkZXB0aH06JHticmVhZHRofTsgYH08L3NwYW4+XG4gICAgICB7cmFuZ2UoYnJlYWR0aCwgaSA9PiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogXCJpbmxpbmVcIiwgYm9yZGVyOiBcInNvbGlkIDFweFwiIH19IGtleT17YGJfJHtkZXB0aH1fJHtpfWB9PlxuICAgICAgICAgIDxzcGFuIHN0eWxlPXt7IGZvbnRTaXplOiBcIjhwdFwiIH19PntgJHtkZXB0aH0tJHtpfTsgYH08L3NwYW4+XG4gICAgICAgICAge2kgPCAzICYmIGRlcHRoID4gMCAmJiAoXG4gICAgICAgICAgICA8TGFyZ2UgYnJlYWR0aD17YnJlYWR0aH0gZGVwdGg9e2RlcHRoIC0gMX0gaW1hZ2VzRGF0YT17cHJvcHMuaW1hZ2VzRGF0YX0gLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICkpfVxuICAgICAge3JhbmdlKDgsIGkgPT4gKFxuICAgICAgICA8c3BhbiBrZXk9e2l9IHN0eWxlPXt7IGZvbnRTaXplOiBcIjhwdFwiIH19PntgJHtpfS5gfTwvc3Bhbj5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5MYXJnZS5wcm9wVHlwZXMgPSB7XG4gIGJyZWFkdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgZGVwdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgaW1hZ2VzRGF0YTogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWRcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExhcmdlO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFFQSxNQUFNQSxLQUFLLEdBQUcsQ0FBQ0MsQ0FBQyxFQUFFQyxFQUFFLEtBQUs7RUFDdkIsTUFBTUMsQ0FBQyxHQUFHLEVBQUU7RUFDWixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0gsQ0FBQyxFQUFFRyxDQUFDLEVBQUUsRUFBRTtJQUMxQkQsQ0FBQyxDQUFDRSxJQUFJLENBQUNILEVBQUUsQ0FBQ0UsQ0FBQyxDQUFDLENBQUM7RUFDZjtFQUNBLE9BQU9ELENBQUM7QUFDVixDQUFDO0FBRUQsU0FBU0csS0FBSyxDQUFDQyxLQUFLLEVBQUU7RUFDcEIsTUFBTTtJQUFFQyxPQUFPO0lBQUVDO0VBQU0sQ0FBQyxHQUFHRixLQUFLO0VBRWhDLE1BQU1HLElBQUksR0FBRyxHQUFHLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDLEVBQUUsSUFBSUgsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQy9DLE1BQU1JLEtBQUssR0FBRyxFQUFFLEdBQUdGLElBQUksQ0FBQ0MsS0FBSyxDQUFDLEdBQUcsSUFBSUgsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBRWhELG9CQUNFO0lBQUssS0FBSyxFQUFFO01BQUVLLE9BQU8sRUFBRSxLQUFLO01BQUVDLE1BQU0sRUFBRyxpQkFBZ0JMLElBQUssS0FBSUcsS0FBTSxLQUFJQSxLQUFNO0lBQUc7RUFBRSxnQkFDbkY7SUFBTSxLQUFLLEVBQUU7TUFBRUcsUUFBUSxFQUFFO0lBQU07RUFBRSxHQUFHLFNBQVFQLEtBQU0sSUFBR0QsT0FBUSxJQUFHLENBQVEsRUFDdkVSLEtBQUssQ0FBQ1EsT0FBTyxFQUFFSixDQUFDLGlCQUNmO0lBQUssS0FBSyxFQUFFO01BQUVhLE9BQU8sRUFBRSxRQUFRO01BQUVGLE1BQU0sRUFBRTtJQUFZLENBQUU7SUFBQyxHQUFHLEVBQUcsS0FBSU4sS0FBTSxJQUFHTCxDQUFFO0VBQUUsZ0JBQzdFO0lBQU0sS0FBSyxFQUFFO01BQUVZLFFBQVEsRUFBRTtJQUFNO0VBQUUsR0FBRyxHQUFFUCxLQUFNLElBQUdMLENBQUUsSUFBRyxDQUFRLEVBQzNEQSxDQUFDLEdBQUcsQ0FBQyxJQUFJSyxLQUFLLEdBQUcsQ0FBQyxpQkFDakIsNkJBQUMsS0FBSztJQUFDLE9BQU8sRUFBRUQsT0FBUTtJQUFDLEtBQUssRUFBRUMsS0FBSyxHQUFHLENBQUU7SUFBQyxVQUFVLEVBQUVGLEtBQUssQ0FBQ1c7RUFBVyxFQUN6RSxDQUVKLENBQUMsRUFDRGxCLEtBQUssQ0FBQyxDQUFDLEVBQUVJLENBQUMsaUJBQ1Q7SUFBTSxHQUFHLEVBQUVBLENBQUU7SUFBQyxLQUFLLEVBQUU7TUFBRVksUUFBUSxFQUFFO0lBQU07RUFBRSxHQUFHLEdBQUVaLENBQUUsR0FBRSxDQUNuRCxDQUFDLENBQ0U7QUFFVjtBQUVBRSxLQUFLLENBQUNhLFNBQVMsR0FBRztFQUNoQlgsT0FBTyxFQUFFWSxrQkFBUyxDQUFDQyxNQUFNLENBQUNDLFVBQVU7RUFDcENiLEtBQUssRUFBRVcsa0JBQVMsQ0FBQ0MsTUFBTSxDQUFDQyxVQUFVO0VBQ2xDSixVQUFVLEVBQUVFLGtCQUFTLENBQUNHLEtBQUssQ0FBQ0Q7QUFDOUIsQ0FBQztBQUFDLGVBRWFoQixLQUFLO0FBQUEifQ==